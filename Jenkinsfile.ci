pipeline {
    agent any
    
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch to build')
    }
    
    environment {
        DOCKER_HUB_CREDS = credentials('dockerhub')
        DOCKER_HUB_USERNAME = "${DOCKER_HUB_CREDS_USR}"
        COMMIT_ID = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                    branches: [[name: "${params.BRANCH_NAME}"]], 
                    userRemoteConfigs: [[url: 'https://github.com/OpsInUs/Petclinic-02.git']] // Corrected your username
                ])
            }
        }
        
        stage('Build') {
            steps {
                sh './mvnw clean package -DskipTests'
                
                // --- DEBUGGING ADDED HERE ---
                sh 'echo "--- Listing workspace root after Maven build ---"'
                sh 'ls -l'
                sh 'echo "--- Listing admin-server directory after Maven build ---"'
                sh 'ls -l admin-server'
                sh 'echo "--- Listing admin-server/target directory after Maven build (if it exists) ---"'
                sh 'ls -lR admin-server/target || echo "admin-server/target not found or empty after build stage"'
                // --- END DEBUGGING --- 
            }
        }
        
        stage('Build and Push Docker Images') {
            steps {
                script {
                    def services = ['admin-server', 'api-gateway', 'customers-service', 'discovery-server', 'vets-service', 'visits-service', 'genai-service']
                    
                    services.each { service ->
                        dir(service) {
                            echo "Current directory inside loop: ${pwd()} for service ${service}"
                            echo "Listing contents of current dir (${service}) for target directory:"
                            sh 'ls -la . || echo "Cannot list current directory."' // List current dir
                            sh 'ls -la target || echo "Target directory does not exist here or is empty for ${service}."'


                            def jarFile = sh(script: "find target -maxdepth 1 -name '*.jar' -print -quit", returnStdout: true).trim()
                            if (jarFile.isEmpty()) {
                                error("No JAR file found in target/ for service ${service}. Current dir: ${pwd()}")
                            }
                            
                            def artifactNameWithExt = jarFile.split('/').last()
                            def artifactName = artifactNameWithExt.take(artifactNameWithExt.lastIndexOf('.'))

                            sh """ 
                            cp ../docker/Dockerfile .
                            docker build --build-arg ARTIFACT_NAME=${artifactName} -t \${DOCKER_HUB_USERNAME}/petclinic-\${service}:\${COMMIT_ID} .
                            docker tag \${DOCKER_HUB_USERNAME}/petclinic-\${service}:\${COMMIT_ID} \${DOCKER_HUB_USERNAME}/petclinic-\${service}:latest
                            echo \${DOCKER_HUB_CREDS_PSW} | docker login -u \${DOCKER_HUB_USERNAME} --password-stdin
                            docker push \${DOCKER_HUB_USERNAME}/petclinic-\${service}:\${COMMIT_ID}
                            docker push \${DOCKER_HUB_USERNAME}/petclinic-\${service}:latest
                            """
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}
