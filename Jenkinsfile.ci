pipeline {
    agent any
    
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch to build' )
    }
    
    environment {
        DOCKER_HUB_CREDS = credentials('dockerhub')
        DOCKER_HUB_USERNAME = "${DOCKER_HUB_CREDS_USR}"
        COMMIT_ID = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                    branches: [[name: "${params.BRANCH_NAME}"]], 
                    userRemoteConfigs: [[url: 'https://github.com/OpsInUs/Petclinic-02']]
                ] )
            }
        }
        
        stage('Build') {
            steps {
                sh './mvnw clean package -DskipTests'
            }
        }
        
        stage('Build and Push Docker Images' ) { 
            steps { 
                script { 
                    def services = ['admin-server', 'api-gateway', 'customers-service', 'discovery-server', 'vets-service', 'visits-service', 'genai-service' ] 
                    
                    services.each { service -> 
                        dir(service) { // Jenkins is now in /var/lib/jenkins/workspace/petclinic-ci/<service-name> 
                            echo "Current directory: ${pwd()}" // For debugging 
                            echo "Listing contents of target directory if it exists:" 
                            sh 'ls -R target || echo "Target directory does not exist here or is empty."' // For debugging 
        
                            // Find the generated JAR file. 
                            // The 'target' directory should be directly accessible from here. 
                            def jarFile = sh(script: "find target -maxdepth 1 -name '*.jar' -print -quit", returnStdout: true ).trim() 
                            if  (jarFile.isEmpty()) { 
                                error("No JAR file found in target/ for service ${service}. Current dir: ${pwd()}" ) 
                            } 
                            
                            def artifactNameWithExt = jarFile.split('/' ).last() 
                            def artifactName = artifactNameWithExt.take(artifactNameWithExt.lastIndexOf('.' )) 
        
                            sh """ 
                            echo "Copying Dockerfile..." 
                            cp ../docker/Dockerfile . 
                            echo "Building Docker image for ${service} with ARTIFACT_NAME=${artifactName} ..." 
                            docker build --build-arg ARTIFACT_NAME=${artifactName} -t \${DOCKER_HUB_USERNAME}/petclinic-\${service}:\${COMMIT_ID}  . 
                            echo "Tagging Docker image..." 
                            docker tag \${DOCKER_HUB_USERNAME}/petclinic-\${service}:\${COMMIT_ID} \${DOCKER_HUB_USERNAME}/petclinic-\${service}:latest 
                            echo "Logging into Docker Hub..." 
                            echo \${DOCKER_HUB_CREDS_PSW} | docker login -u \${DOCKER_HUB_USERNAME}  --password-stdin 
                            echo "Pushing Docker image with commit ID tag..." 
                            docker push \${DOCKER_HUB_USERNAME}/petclinic-\${service}:\${COMMIT_ID} 
                            echo "Pushing Docker image with latest tag..." 
                            docker push \${DOCKER_HUB_USERNAME}/petclinic-\${service}:latest 
                            echo "Docker image push complete for ${service} ." 
                            """ 
                        } 
                    } 
                } 
            } 
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}
